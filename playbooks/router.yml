---
- name: Playbook to set up the FRR router ec2 in aws
  hosts: localhost
  gather_facts: false
  become: false
  vars_files:
    # Use this to override stuff that won't be committed to git
    - ../overrides.yml

  tasks:
    - name: Get AWS caller identity for Owner tag
      amazon.aws.aws_caller_info:
        profile: "{{ aws_profile }}"
      register: aws_caller_info

    - name: Set OCP owner from AWS user
      ansible.builtin.set_fact:
        ocp_owner: "{{ aws_caller_info.arn.split('/')[-1] | default(ansible_env.USER) | default(ansible_user_id) | default('unknown') }}"

    - name: Print AWS infos
      ansible.builtin.debug:
        msg: "Region: {{ ocp_region }} - AWS Profile: {{ aws_profile }} OCP owner: {{ ocp_owner }}"

    - name: Create key pair to access ec2 with ssh
      amazon.aws.ec2_key:
        profile: "{{ aws_profile }}"
        region: "{{ ocp_region }}"
        name: "{{ frr_router_ssh_key_name }}"
        key_material: "{{ ssh_pubkey }}"

    - name: Gather security group info for workers
      amazon.aws.ec2_security_group_info:
        profile: "{{ aws_profile }}"
        region: "{{ ocp_region }}"
        filters:
          "tag:sigs.k8s.io/cluster-api-provider-aws/role": "node"
      register: sg_info

    - name: Set vpc and sg id
      ansible.builtin.set_fact:
        sg_vpc_id: "{{ sg_info.security_groups[0].vpc_id }}"
        sg_group_id: "{{ sg_info.security_groups[0].group_id }}"

    - name: Gather vpc info for workers
      amazon.aws.ec2_vpc_subnet_info:
        profile: "{{ aws_profile }}"
        region: "{{ ocp_region }}"
        filters:
          vpc-id: "{{ sg_vpc_id }}"
      register: subnet_info

    - name: Set public subnet id
      ansible.builtin.set_fact: # only add the public subnet, and there will be only exactly one
        public_subnet_id: "{{ subnet_info.subnets |  selectattr('map_public_ip_on_launch', '==', true) | map(attribute='subnet_id') | first }}"

    - name: Print AWS infos
      ansible.builtin.debug:
        msg: "subnet: {{ public_subnet_id }}"


    - name: Create ec2 security group
      amazon.aws.ec2_security_group:
        profile: "{{ aws_profile }}"
        region: "{{ ocp_region }}"
        name: frr-router-security-group
        description: sec group for frr router ec2
        vpc_id: "{{ sg_vpc_id }}"
        rules:
        - proto: tcp
          ports:
            - 22
          group_id: "{{ sg_group_id }}"
          rule_desc: allow ssh from the ocp workers to debug
        - proto: tcp
          ports:
            - 179
          group_id: "{{ sg_group_id }}"
          rule_desc: allow BGP for ocp worker nodes
        - proto: udp
          ports:
            - 3784
          group_id: "{{ sg_group_id }}"
          rule_desc: allow BFD for ocp worker nodes
        - proto: udp
          ports:
            - 3785
          group_id: "{{ sg_group_id }}"
          rule_desc: allow BFD for ocp worker nodes

    - name: Start an instance with EBS
      amazon.aws.ec2_instance:
        profile: "{{ aws_profile }}"
        region: "{{ ocp_region }}"
        name: "frr-router-{{ ocp_owner }}"
        state: started
        wait: true
        vpc_subnet_id: "{{ public_subnet_id }}"
        instance_type: "{{ frr_router_instance_type }}"
        key_name: "{{ frr_router_ssh_key_name }}"
        security_group: frr-router-security-group
        network_interfaces:
          - assign_public_ip: false
            private_ip_addresses:
            - primary: true
              private_ip_address: "{{ frr_router_primary_ip }}"
        image_id: "{{ frr_router_ami_image_id }}"
        user_data: |
          #cloud-config
              #cloud-config
          chpasswd:
            expire: false
          password: {{ frr_router_user_password }}
          user: ec2-user
          packages:
          - tmux
          - vim
          write_files:
          - content: !!binary |
              "{{ lookup('template', '../templates/daemons.j2') | b64encode }}"
            path: /etc/frr/daemons
          - content: !!binary |
              "{{ lookup('template', '../templates/frr.conf.j2') | b64encode }}"
            path: /etc/frr/frr.conf
          - content: !!binary |
              "{{ lookup('template', '../templates/vtysh.conf.j2') | b64encode }}"
            path: /etc/frr/vtysh.conf
          runcmd:
          - podman run -d --rm  -v /etc/frr:/etc/frr:Z --net=host --name frr-upstream --privileged quay.io/frrouting/frr:master

